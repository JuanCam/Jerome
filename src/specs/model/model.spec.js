describe('Model (Three models are going to be created)', function() {
    var modelA, modelB, modelC;
    beforeAll(function() {
        modelA = Jerome.defModel({ url: 'api/model' });
        modelB = Jerome.defModel({
            url: 'api/model',
            Nombre: 'Yesica',
            Ocupacion: 'Docente',
            LugarNacimiento: 'Bogota'
        });
        modelC = Jerome.defModel({
            url: 'api/model',
            id: 2031
        });
    });
    it('modelA should have an url', function() {
        expect(modelA.url).toBe('api/model');
    });
    it('modelA should have get method', function() {
        expect(modelA.get).toBeDefined()
    });
    it('modelA should return id (autogenerated)', function() {
        expect(modelA.id).toBe(1);
    });
    it('modelB should return id (autogenerated)', function() {
        expect(modelB.id).toBe(2);
    });
    it('modelC should return id (assigned)', function() {
        expect(modelC.id).toBe(2031);
    });
    it('modelB should return props', function() {
        expect(modelB.props).toEqual(jasmine.objectContaining({
            Nombre: 'Yesica',
            Ocupacion: 'Docente',
            LugarNacimiento: 'Bogota'
        }));
    });
    it('modelB should return a property using get', function() {
        expect(modelB.get('Nombre')).toEqual('Yesica');
        expect(modelB.get('Ocupacion')).toEqual('Docente');
    });
    it('modelA should have set method', function() {
        expect(modelA.set).toBeDefined()
    });
    it('modelA set method a value (using strings as params)', function() {
        modelA.set('Nombre', 'Juan');
        modelA.set('Ocupacion', 'Dev.');
        expect(modelA.get('Nombre')).toBe('Juan');
        expect(modelA.get('Ocupacion')).toBe('Dev.');
    });
    it('modelA set method a value (using object as param)', function() {
        modelA.set({
            'Nombre': 'Juan Camilo',
            'Ocupacion': 'Web UI Dev.'
        });
        expect(modelA.get('Nombre')).toBe('Juan Camilo');
        expect(modelA.get('Ocupacion')).toBe('Web UI Dev.');
    });
    it('modelA remove method. It should remove properties', function() {
        modelA.remove('Nombre');
        expect(modelA.get('Nombre')).toBeUndefined();
    });
    it('modelA openEmit method. It should open an emit', function() {
        modelA.openEmit('cambioNombre', function() {
            return 1;
        });
        expect(modelA.emitEvns.cambioNombre).toBeDefined();
    });
    it('modelA emit method. It should emit an event ans=1', function() {
        expect(modelA.emit('cambioNombre')).toBe(1);
    });
    it('modelA openEmit method. It should open an emit', function() {
        modelA.openEmit('cambioNombre', function() {
            return 2;
        });
        expect(modelA.emitEvns.cambioNombre).toBeDefined();
    });
    it('modelA emit method. It should emit an event ans=2', function() {
        expect(modelA.emit('cambioNombre')).toBe(2);
    });
    /*it('modelA openListener method. It should open a listener', function() {
        modelA.openListener('cambioNombre',function() { return 1 });
        expect(modelA.listenerEvns.cambioNombre()).toBe(1);
    });
    it('modelA emit method. It should emit an event', function() {
        modelA.emit('Nombre');
        expect(modelA.get('Nombre')).toBeUndefined();
    });*/
});
